-- ==== Load Obsidian Library & Setup ====
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
Library:SetDPIScale(85)
Library:SetWatermarkVisibility(true)

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LP = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Watermark FPS + Ping update
local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60
local Stats = game:GetService("Stats")

RunService.RenderStepped:Connect(function()
    FrameCounter += 1
    if tick() - FrameTimer >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end
    Library:SetWatermark(('Velocity Trial | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(Stats.Network.ServerStatsItem['Data Ping']:GetValue())
    ))
end)

Library:Notify({ Title = "Success", Description = "Script Executed successfully", Time = 5 })

-- Load addons
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()
local Options = Library.Options
local Toggles = Library.Toggles

-- Create Window
local Window = Library:CreateWindow({
    Title = "Velocity",
    Footer = "version: Version 1.0",
    Icon = 128828160470041,
    NotifySide = "Right",
    ShowCustomCursor = false,
})

-- Tabs
local Tabs = {
    Main = Window:AddTab("Main", "user"),
    Esp = Window:AddTab({Name = "Visuals", Description = "Visuals & Players", Icon = "eye"})
}

-- ==== Silent Aim Group ====
local SAGroup = Tabs.Main:AddLeftGroupbox("Silent Aim", "crosshair")
local SAFOV = 100
local FOVColor = Color3.fromRGB(255,255,255)
local C1, C2 = nil, nil
local SAConnections = {}
local SAHook = nil
local HitPart = "HumanoidRootPart" -- default hit part

local SAToggle = SAGroup:AddToggle("SilentAimToggle", {
    Text = "Enable Silent Aim",
    Default = false,
    Tooltip = "Toggle Silent Aim on/off",
    Callback = function(Value)
        if Value then
            local CC = Workspace.CurrentCamera
            local SA = {fov = SAFOV, fovcircle = true}
            local Tgt = nil
            C1 = Drawing.new("Circle")
            C2 = Drawing.new("Circle")

            SAConnections.RenderStepped = RunService.Stepped:Connect(function()
                local sc = Vector2.new(CC.ViewportSize.X/2, CC.ViewportSize.Y/2)
                SA.fov = SAFOV
                for _, c in ipairs({C1,C2}) do
                    c.Radius = SA.fov
                    c.Position = sc
                    c.Transparency = 0.3
                    c.Visible = SA.fovcircle
                end
                C1.Thickness, C1.Color, C1.ZIndex = 2, FOVColor, 2
                C2.Thickness, C2.Color, C2.ZIndex = 4, Color3.new(), 1

                local closest, dist = nil, SA.fov
                for _, v in ipairs(Players:GetPlayers()) do
                    local h = v.Character and v.Character:FindFirstChild(HitPart)
                    if v ~= LP and h then
                        local hum = v.Character:FindFirstChildOfClass("Humanoid")
                        local pos, on = CC:WorldToViewportPoint(h.Position + Vector3.new(0,0.2,0))
                        if on and hum and hum.Health > 0 then
                            local canTarget = true
                            if Toggles.SAWallCheck.Value then
                                local rayParams = RaycastParams.new()
                                rayParams.FilterType = Enum.RaycastFilterType.Blacklist
                                rayParams.FilterDescendantsInstances = {LP.Character}
                                local result = Workspace:Raycast(CC.CFrame.Position, (h.Position - CC.CFrame.Position).Unit * 1000, rayParams)
                                canTarget = not result or result.Instance:IsDescendantOf(v.Character)
                            end
                            if canTarget then
                                local m = (Vector2.new(pos.X,pos.Y)-sc).Magnitude
                                if m < dist then
                                    dist, closest = m, v
                                end
                            end
                        end
                    end
                end
                Tgt = closest
            end)

            SAHook = hookmetamethod(game, "__namecall", function(self,...)
                local a={...}
                if not checkcaller() and getnamecallmethod()=="FindPartOnRayWithIgnoreList" and Tgt and Tgt.Character then
                    local o = a[1].Origin
                    a[1] = Ray.new(o, Tgt.Character[HitPart].Position-o)
                end
                return SAHook(self, unpack(a))
            end)
        else
            for _, conn in pairs(SAConnections) do conn:Disconnect() end
            SAConnections = {}
            if C1 then C1:Remove() end
            if C2 then C2:Remove() end
            if SAHook then hookmetamethod(game, "__namecall", SAHook) end
        end
    end
})

-- FOV Slider
SAGroup:AddSlider("SAFOVSlider", {
    Text = "FOV Size",
    Default = SAFOV,
    Min = 10,
    Max = 500,
    Rounding = 1,
    Callback = function(Value)
        SAFOV = Value
    end
})

-- FOV Color Picker
SAToggle:AddColorPicker("SAFOVColor", {
    Default = FOVColor,
    Title = "FOV Color",
    Transparency = 0,
    Callback = function(Value)
        FOVColor = Value
    end
})

-- Wall Check Toggle
local SAOptionsGroup = Tabs.Main:AddLeftGroupbox("Silent Aim Options", "eye")
SAOptionsGroup:AddToggle("SAWallCheck", { Text = "Wall Check", Default = false, Tooltip = "Only target visible players" })

-- Hit Part Dropdown
SAGroup:AddDropdown("SAHitPartDropdown", {
    Text = "Hit Part",
    Values = {"Head", "Torso", "HumanoidRootPart"},
    Default = "HumanoidRootPart",
    Tooltip = "Select which part to aim at",
    Callback = function(Value)
        HitPart = Value
    end
})

-- ==== ESP / Visuals ====
local ESPGroup = Tabs.Esp:AddLeftGroupbox("Player Visuals", "eye")

-- Highlight toggle (chams)
local ESPHighlightToggle = ESPGroup:AddToggle("ESPEnabled", {
    Text = "Enable Highlight",
    Default = false,
    Tooltip = "Enable player highlights (chams)"
})

-- Sub-toggles
local ESPNameToggle = ESPGroup:AddToggle("ESPName", {Text = "Show Names", Default = false})
local ESPHealthToggle = ESPGroup:AddToggle("ESPHealthBar", {Text = "Show Health Bars", Default = false})
local ESPDistanceToggle = ESPGroup:AddToggle("ESPDistance", {Text = "Show Distance", Default = false})
local ESPCornersToggle = ESPGroup:AddToggle("ESPCorners", {Text = "Show Outline Box", Default = false})
local ESPWeaponToggle = ESPGroup:AddToggle("ESPWeapon", {Text = "Show Weapon/Tool", Default = false})

-- Field of view camera slider
local CameraFOV = 70
ESPGroup:AddSlider("CameraFOVSlider", {
    Text = "Camera Feild Of View",
    Default = CameraFOV,
    Min = 50,
    Max = 120,
    Rounding = 1,
    Callback = function(Value)
        CameraFOV = Value
        Camera.FieldOfView = CameraFOV
    end
})

-- Storage for drawings and highlights
local Drawings = {}
local Highlights = {}

-- Health color gradient
local function getHealthColor(p)
    return Color3.fromHSV(p * 0.33, 1, 1)
end

-- Cleanup ESP for a player
local function removeESP(plr)
    if Drawings[plr] then
        for _, obj in pairs(Drawings[plr]) do
            if typeof(obj) == "table" then
                for _, d in pairs(obj) do if d.Remove then d:Remove() end end
            elseif obj.Remove then
                obj:Remove()
            end
        end
        Drawings[plr] = nil
    end
    if Highlights[plr] then
        Highlights[plr]:Destroy()
        Highlights[plr] = nil
    end
end

-- Build 8 corner lines
local function createCorners()
    local lines = {}
    for _ = 1, 8 do
        local l = Drawing.new("Line")
        l.Color = Color3.new(1,1,1)
        l.Thickness = 2
        l.Visible = false
        table.insert(lines, l)
    end
    return lines
end

-- Initialize ESP for a player
local function createESP(plr)
    if plr == LP then return end

    Drawings[plr] = {
        DisplayName = Drawing.new("Text"),
        Username = Drawing.new("Text"),
        Distance = Drawing.new("Text"),
        HealthBar = Drawing.new("Line"),
        HealthText = Drawing.new("Text"),
        Corners = createCorners(),
        Weapon = Drawing.new("Text")
    }

    for _, obj in pairs({Drawings[plr].DisplayName, Drawings[plr].Username, Drawings[plr].Distance, Drawings[plr].HealthText, Drawings[plr].Weapon}) do
        obj.Visible = false
        obj.Center = true
        obj.Outline = true
        obj.Font = 2
        obj.Size = 13
        obj.Color = Color3.new(1,1,1)
    end

    Drawings[plr].HealthBar.Thickness = 4
    Drawings[plr].HealthBar.Visible = false

    if ESPHighlightToggle.Value then
        local h = Instance.new("Highlight")
        h.FillColor = Color3.fromRGB(0, 0, 255)
        h.OutlineColor = Color3.new(1, 1, 1)
        h.FillTransparency = 0.25
        h.OutlineTransparency = 0
        h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        h.Parent = game.CoreGui
        Highlights[plr] = h
    end
end

-- ESP Render Loop
RunService.RenderStepped:Connect(function()
    if not ESPHighlightToggle.Value and not ESPNameToggle.Value and not ESPHealthToggle.Value and not ESPDistanceToggle.Value and not ESPCornersToggle.Value and not ESPWeaponToggle.Value then
        for _, plr in pairs(Players:GetPlayers()) do removeESP(plr) end
        return
    end

    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LP and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local char = plr.Character
            local hrp = char:FindFirstChild("HumanoidRootPart")
            local hum = char:FindFirstChildOfClass("Humanoid")
            local pos, vis = Camera:WorldToViewportPoint(hrp.Position)
            local dist = (Camera.CFrame.Position - hrp.Position).Magnitude

            if not Drawings[plr] then createESP(plr) end
            local obj = Drawings[plr]

            if vis and dist <= 1000 then
                local scale = 1 / (dist / 100)
                local boxW = 30 * scale
                local boxH = 30 * scale
                local size = Vector2.new(boxW, boxH)
                local tl = Vector2.new(pos.X - size.X/2, pos.Y - size.Y/2)
                local tr = tl + Vector2.new(size.X, 0)
                local bl = tl + Vector2.new(0, size.Y)
                local br = tl + size

                local len = 8 * scale
                local c = obj.Corners

                -- Draw corner lines
                for i=1,8 do
                    c[i].Visible = ESPCornersToggle.Value
                end
                c[1].From = tl; c[1].To = tl + Vector2.new(len,0)
                c[2].From = tl; c[2].To = tl + Vector2.new(0,len)
                c[3].From = tr; c[3].To = tr - Vector2.new(len,0)
                c[4].From = tr; c[4].To = tr + Vector2.new(0,len)
                c[5].From = bl; c[5].To = bl + Vector2.new(len,0)
                c[6].From = bl; c[6].To = bl - Vector2.new(0,len)
                c[7].From = br; c[7].To = br - Vector2.new(len,0)
                c[8].From = br; c[8].To = br - Vector2.new(0,len)

                -- DisplayName
                obj.DisplayName.Position = Vector2.new(pos.X, tl.Y - 35)
                obj.DisplayName.Text = plr.DisplayName
                obj.DisplayName.Visible = ESPNameToggle.Value

                -- Username
                obj.Username.Position = Vector2.new(pos.X, tl.Y - 23)
                obj.Username.Text = plr.Name
                obj.Username.Visible = ESPNameToggle.Value

                -- Distance
                obj.Distance.Position = Vector2.new(pos.X, br.Y + 4)
                obj.Distance.Text = math.floor(dist).." Studs"
                obj.Distance.Visible = ESPDistanceToggle.Value

                -- Health Bar
                if hum then
                    local hpPercent = math.clamp(hum.Health / hum.MaxHealth,0,1)
                    local barHeight = size.Y * hpPercent
                    local from = Vector2.new(tl.X - 6, br.Y)
                    local to = Vector2.new(tl.X - 6, br.Y - barHeight)
                    obj.HealthBar.From = from
                    obj.HealthBar.To = to
                    obj.HealthBar.Color = getHealthColor(hpPercent)
                    obj.HealthBar.Visible = ESPHealthToggle.Value

                    obj.HealthText.Position = Vector2.new(from.X - 10, to.Y - 6)
                    obj.HealthText.Text = tostring(math.floor(hum.Health))
                    obj.HealthText.Color = getHealthColor(hpPercent)
                    obj.HealthText.Visible = ESPHealthToggle.Value
                end

                -- Weapon ESP
                if ESPWeaponToggle.Value then
                    local tool = nil
                    for _, child in ipairs(char:GetChildren()) do
                        if child:IsA("Tool") then
                            tool = child
                            break
                        end
                    end
                    if tool then
                        obj.Weapon.Text = tool.Name
                        obj.Weapon.Position = Vector2.new(pos.X, tl.Y - 50)
                        obj.Weapon.Visible = true
                    else
                        obj.Weapon.Visible = false
                    end
                else
                    obj.Weapon.Visible = false
                end

                -- Chams
                if Highlights[plr] then
                    Highlights[plr].Adornee = char
                    Highlights[plr].Enabled = ESPHighlightToggle.Value
                end
            else
                for _, obj2 in pairs(obj) do
                    if typeof(obj2) == "table" then
                        for _, x in pairs(obj2) do x.Visible = false end
                    elseif obj2.Visible then
                        obj2.Visible = false
                    end
                end
                if Highlights[plr] then Highlights[plr].Enabled = false end
            end
        else
            removeESP(plr)
        end
    end
end)

Players.PlayerRemoving:Connect(removeESP)

-- ==== World Group ====
local WorldGroup = Tabs.Esp:AddRightGroupbox("World", "globe")

WorldGroup:AddButton("Stretched Resolution", function()
    -- Original
    getgenv().Resolution = {
        [".gg/scripters"] = 0.65
    }

    local Camera = workspace.CurrentCamera
    if getgenv().gg_scripters == nil then
        game:GetService("RunService").RenderStepped:Connect(function()
            Camera.CFrame = Camera.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().Resolution[".gg/scripters"], 0, 0, 0, 1)
        end)
    end
    getgenv().gg_scripters = "Aori0001"
end)

-- ==== Finish Setup ====
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetFolder("MyScriptHub")
SaveManager:SetSubFolder("specific-place")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()
